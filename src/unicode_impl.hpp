// Copyright 2006-2016 Nemanja Trifunovic

/*
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef UTF8_FOR_CPP_CHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731
#define UTF8_FOR_CPP_CHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731

#include <stdexcept>
#include <algorithm>
#include <skyr/unicode.hpp>

namespace skyr {
namespace utf8 {
// Helper code - not intended to be directly called by the library users. May be
// changed at any time
namespace internal {
// Unicode constants
// Leading (high) surrogates: 0xd800 - 0xdbff
// Trailing (low) surrogates: 0xdc00 - 0xdfff
const char16_t LEAD_SURROGATE_MIN = 0xd800u;
const char16_t LEAD_SURROGATE_MAX = 0xdbffu;
const char16_t TRAIL_SURROGATE_MIN = 0xdc00u;
const char16_t TRAIL_SURROGATE_MAX = 0xdfffu;
const char16_t LEAD_OFFSET = LEAD_SURROGATE_MIN - (0x10000 >> 10);
const char32_t SURROGATE_OFFSET =
    0x10000u - (LEAD_SURROGATE_MIN << 10) - TRAIL_SURROGATE_MIN;

// Maximum valid value for a Unicode code point
const char32_t CODE_POINT_MAX = 0x0010ffffu;

template <typename OctetType>
inline uint8_t mask8(OctetType oc) {
    return static_cast<uint8_t>(0xff & oc);
}

template <typename U16Type>
inline char16_t mask16(U16Type oc) {
    return static_cast<char16_t>(0xffff & oc);
}
template <typename OctetType>
inline bool is_trail(OctetType oc) {
    return ((utf8::internal::mask8(oc) >> 6) == 0x2);
}

inline bool is_lead_surrogate(char16_t cp) {
    return (cp >= LEAD_SURROGATE_MIN && cp <= LEAD_SURROGATE_MAX);
}

inline bool is_trail_surrogate(char16_t cp) {
  return (cp >= TRAIL_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);
}

inline bool is_surrogate(char16_t cp) {
  return (cp >= LEAD_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);
}

inline bool is_code_point_valid(char32_t cp) {
  return (cp <= CODE_POINT_MAX && !utf8::internal::is_surrogate(cp));
}

template <typename OctetIterator>
inline std::ptrdiff_t sequence_length(
    OctetIterator lead_it) {
  auto lead = utf8::internal::mask8(*lead_it);
  if (lead < 0x80) {
    return 1;
  } else if ((lead >> 5) == 0x6) {
    return 2;
  } else if ((lead >> 4) == 0xe) {
    return 3;
  } else if ((lead >> 3) == 0x1e) {
    return 4;
  }
  return 0;
}

inline bool is_overlong_sequence(
    char32_t cp,
    std::ptrdiff_t length) {
  if (cp < 0x80) {
    if (length != 1) {
      return true;
    }
  } else if (cp < 0x800) {
    if (length != 2) {
      return true;
    }
  } else if (cp < 0x10000) {
    if (length != 3) {
      return true;
    }
  }

  return false;
}

//enum utf_error {
////  UTF8_OK,
//  OVERFLOW,
//  INVALID_LEAD,
////  INCOMPLETE_SEQUENCE,
////  OVERLONG_SEQUENCE,
//  ILLEGAL_BYTE_SEQUENCE,
//  INVALID_CODE_POINT
//};

/// Helper for get_sequence_x
template <typename OctetIterator>
expected<void, unicode_errc> increase_safely(
    OctetIterator& it,
    OctetIterator end) {
  if (++it == end) {
    return make_unexpected(unicode_errc::overflow);
  }

  if (!utf8::internal::is_trail(*it)) {
    return make_unexpected(unicode_errc::illegal_byte_sequence);
  }

  return {};
}

/// get_sequence_x functions decode utf-8 sequences of the length x
template <typename OctetIterator>
expected<void, unicode_errc> get_sequence_1(
    OctetIterator& it,
    OctetIterator end,
    char32_t& code_point) {
  if (it == end) {
    return make_unexpected(unicode_errc::overflow);
  }
  code_point = utf8::internal::mask8(*it);
  return {};
}

template <typename OctetIterator>
expected<void, unicode_errc> get_sequence_2(
    OctetIterator& it,
    OctetIterator last,
    char32_t& code_point) {
  if (it == last) {
    return make_unexpected(unicode_errc::overflow);
  }

  code_point = utf8::internal::mask8(*it);

  auto result = increase_safely(it, last);
  if (!result) {
    return result;
  }

  code_point = ((code_point << 6) & 0x7ff) + ((*it) & 0x3f);

  return {};
}

template <typename OctetIterator>
expected<void, unicode_errc> get_sequence_3(
    OctetIterator& it,
    OctetIterator last,
    char32_t& code_point) {
  if (it == last) {
    return make_unexpected(unicode_errc::overflow);
  }

  code_point = utf8::internal::mask8(*it);

  {
    auto result = increase_safely(it, last);
    if (!result) {
      return result;
    }
  }

  code_point = ((code_point << 12) & 0xffff) +
               ((utf8::internal::mask8(*it) << 6) & 0xfff);

  {
    auto result = increase_safely(it, last);
    if (!result) {
      return result;
    }
  }

  code_point += (*it) & 0x3f;

  return {};
}

template <typename OctetIterator>
expected<void, unicode_errc> get_sequence_4(
    OctetIterator& it,
    OctetIterator last,
    char32_t& code_point) {
  if (it == last) {
    return make_unexpected(unicode_errc::overflow);
  }

  code_point = utf8::internal::mask8(*it);

  {
    auto result = increase_safely(it, last);
    if (!result) {
      return result;
    }
  }

  code_point = ((code_point << 18) & 0x1fffff) +
               ((utf8::internal::mask8(*it) << 12) & 0x3ffff);

  {
    auto result = increase_safely(it, last);
    if (!result) {
      return result;
    }
  }

  code_point += (utf8::internal::mask8(*it) << 6) & 0xfff;

  {
    auto result = increase_safely(it, last);
    if (!result) {
      return result;
    }
  }

  code_point += (*it) & 0x3f;

  return {};
}

template <typename OctetIterator>
expected<void, unicode_errc> validate_next(
    OctetIterator& it,
    OctetIterator last,
    char32_t& code_point) {
  if (it == last) {
    return make_unexpected(unicode_errc::overflow);
  }

  // Save the original value of it so we can go back in case of failure
  // Of course, it does not make much sense with i.e. stream iterators
  auto original_it = it;

  char32_t cp = 0;
  // Determine the sequence length based on the lead octet
  const auto length = utf8::internal::sequence_length(it);

  // Get trail octets and calculate the code point
  switch (length) {
    case 0:
      return make_unexpected(unicode_errc::overflow);
    case 1:
      {
        auto result = utf8::internal::get_sequence_1(it, last, cp);
        if (!result) {
          return result;
        }
      }
      break;
    case 2:
    {
      auto result = utf8::internal::get_sequence_2(it, last, cp);
      if (!result) {
        return result;
      }
    }
      break;
    case 3:
    {
      auto result = utf8::internal::get_sequence_3(it, last, cp);
      if (!result) {
        return result;
      }
    }
      break;
    case 4:
    {
      auto result = utf8::internal::get_sequence_4(it, last, cp);
      if (!result) {
        return result;
      }
    }
      break;
  }

  // Decoding succeeded. Now, security checks...
  if (utf8::internal::is_code_point_valid(cp)) {
    if (utf8::internal::is_overlong_sequence(cp, length)) {
      it = original_it;
      return make_unexpected(unicode_errc::illegal_byte_sequence);
    }
  } else {
    it = original_it;
    return make_unexpected(unicode_errc::invalid_code_point);
  }

  code_point = cp;
  ++it;
  return {};
}

template <typename OctetIterator>
inline expected<void, unicode_errc> validate_next(
    OctetIterator& it,
    OctetIterator last) {
  char32_t ignored;
  return utf8::internal::validate_next(it, last, ignored);
}

}  // namespace internal

/// The library API - functions intended to be called by the users

template <typename OctetIterator>
OctetIterator find_invalid(
    OctetIterator first,
    OctetIterator last) {
  auto it = first;
  while (it != last) {
    auto err_code = utf8::internal::validate_next(it, last);
    if (!err_code) {
      return it;
    }
  }
  return it;
}

template <typename OctetIterator>
inline bool is_valid(
    OctetIterator first,
    OctetIterator last) {
  return (utf8::find_invalid(first, last) == last);
}

template <typename OctetIterator>
inline bool starts_with_bom(
    OctetIterator it,
    OctetIterator last) {
  // Byte order mark
  const uint8_t bom[] = {0xef, 0xbb, 0xbf};
  return (((it != last) && (utf8::internal::mask8(*it++)) == bom[0]) &&
        ((it != last) && (utf8::internal::mask8(*it++)) == bom[1]) &&
        ((it != last) && (utf8::internal::mask8(*it)) == bom[2]));
}

// Base for the exceptions that may be thrown from the library
class exception : public ::std::exception {};

// Exceptions that may be thrown from the library functions.
class invalid_code_point : public exception {
  char32_t cp;

 public:
  invalid_code_point(char32_t codepoint) : cp(codepoint) {}
  virtual const char* what() const throw() { return "Invalid code point"; }
  char32_t code_point() const { return cp; }
};

class invalid_utf8 : public exception {
  uint8_t u8;

 public:
  invalid_utf8(uint8_t u) : u8(u) {}
  virtual const char* what() const throw() { return "Invalid UTF-8"; }
  uint8_t utf8_octet() const { return u8; }
};

class invalid_utf16 : public exception {
  char16_t u16;

 public:
  invalid_utf16(char16_t u) : u16(u) {}
  virtual const char* what() const throw() { return "Invalid UTF-16"; }
  char16_t utf16_word() const { return u16; }
};

class not_enough_room : public exception {
 public:
  virtual const char* what() const throw() { return "Not enough space"; }
};

/// The library API - functions intended to be called by the users

template <typename OctetIterator>
OctetIterator append(
    char32_t cp,
    OctetIterator result) {
  if (!utf8::internal::is_code_point_valid(cp)) {
    throw invalid_code_point(cp);
  }

  if (cp < 0x80) { // one octet
    *(result++) = static_cast<uint8_t>(cp);
  }
  else if (cp < 0x800) {  // two octets
    *(result++) = static_cast<uint8_t>((cp >> 6) | 0xc0);
    *(result++) = static_cast<uint8_t>((cp & 0x3f) | 0x80);
  } else if (cp < 0x10000) {  // three octets
    *(result++) = static_cast<uint8_t>((cp >> 12) | 0xe0);
    *(result++) = static_cast<uint8_t>(((cp >> 6) & 0x3f) | 0x80);
    *(result++) = static_cast<uint8_t>((cp & 0x3f) | 0x80);
  } else {  // four octets
    *(result++) = static_cast<uint8_t>((cp >> 18) | 0xf0);
    *(result++) = static_cast<uint8_t>(((cp >> 12) & 0x3f) | 0x80);
    *(result++) = static_cast<uint8_t>(((cp >> 6) & 0x3f) | 0x80);
    *(result++) = static_cast<uint8_t>((cp & 0x3f) | 0x80);
  }
  return result;
}

template <typename OctetIterator, typename OutputIterator>
OutputIterator replace_invalid(
    OctetIterator first,
    OctetIterator last,
    OutputIterator out,
    char32_t replacement) {
  auto it = first;
  while (it != last) {
    auto seq_first = it;
    auto result = utf8::internal::validate_next(it, last);
    if (result) {
      out = std::copy(seq_first, it, out);
    }
    else {
      switch (result.error()) {
        case unicode_errc::overflow:
          throw not_enough_room();
        case unicode_errc::invalid_lead:
          out = utf8::append(replacement, out);
          ++it;
          break;
        case unicode_errc::illegal_byte_sequence:
        case unicode_errc::invalid_code_point:
          out = utf8::append(replacement, out);
          ++it;
          // just one replacement mark for the sequence
          while ((it != last) && utf8::internal::is_trail(*it)) {
            ++it;
          }
          break;
      }
    }
  }
  return out;
}

template <typename OctetIterator, typename OutputIterator>
inline OutputIterator replace_invalid(
    OctetIterator first,
    OctetIterator last,
    OutputIterator out) {
  static const auto replacement_marker = utf8::internal::mask16(0xfffd);
  return utf8::replace_invalid(first, last, out, replacement_marker);
}

template <typename OctetIterator>
char32_t next(
    OctetIterator& it,
    OctetIterator last) {
  char32_t cp = 0;
  auto result = utf8::internal::validate_next(it, last, cp);
  if (!result) {
    switch (result.error()) {
      case unicode_errc::overflow:
        throw not_enough_room();
      case unicode_errc::invalid_lead:
      case unicode_errc::illegal_byte_sequence:
        throw invalid_utf8(*it);
      case unicode_errc::invalid_code_point:
        throw invalid_code_point(cp);
    }
  }
  return cp;
}

template <typename OctetIterator>
char32_t peek_next(
    OctetIterator it,
    OctetIterator last) {
  return utf8::next(it, last);
}

template <typename OctetIterator>
char32_t prior(
    OctetIterator& it,
    OctetIterator first) {
  // can't do much if it == start
  if (it == first) {
    throw not_enough_room();
  }

  auto last = it;
  // Go back until we hit either a lead octet or start
  while (utf8::internal::is_trail(*(--it)))
    if (it == first) {
      throw invalid_utf8(*it);  // error - no lead byte in the sequence
    }
  return utf8::peek_next(it, last);
}

/// Deprecated in versions that include "prior"
template <typename OctetIterator>
char32_t previous(
    OctetIterator& it,
    OctetIterator pass_start) {
  auto end = it;
  while (utf8::internal::is_trail(*(--it)))
    if (it == pass_start) {
      throw invalid_utf8(*it);  // error - no lead byte in the sequence
    }
  auto temp = it;
  return utf8::next(temp, end);
}

template <typename OctetIterator>
void advance(
    OctetIterator& it,
    std::ptrdiff_t n,
    OctetIterator end) {
  while (n != 0) {
    utf8::next(it, end);
    --n;
  }
}

template <typename OctetIterator>
std::ptrdiff_t distance(
    OctetIterator first,
    OctetIterator last) {
  std::ptrdiff_t dist = 0;
  auto it = first;
  while (it != last) {
    utf8::next(it, last);
    ++dist;
  }
  return dist;
}

template <typename U16BitIterator, typename OctetIterator>
OctetIterator utf16to8(
    U16BitIterator first,
    U16BitIterator last,
    OctetIterator result) {
  auto it = first;
  while (it != last) {
    auto cp = utf8::internal::mask16(*it++);
    // Take care of surrogate pairs first
    if (utf8::internal::is_lead_surrogate(cp)) {
      if (it != last) {
        auto trail_surrogate = utf8::internal::mask16(*it++);
        if (utf8::internal::is_trail_surrogate(trail_surrogate)) {
          cp = (cp << 10) + trail_surrogate + internal::SURROGATE_OFFSET;
        }
        else {
          throw invalid_utf16(static_cast<char16_t>(trail_surrogate));
        }
      } else {
        throw invalid_utf16(static_cast<char16_t>(cp));
      }
    }
    // Lone trail surrogate
    else if (utf8::internal::is_trail_surrogate(cp)) {
      throw invalid_utf16(static_cast<char16_t>(cp));
    }

    result = utf8::append(cp, result);
  }
  return result;
}

template <typename U16BitIterator, typename OctetIterator>
U16BitIterator utf8to16(
    OctetIterator first,
    OctetIterator last,
    U16BitIterator result) {
  auto it = first;
  while (it != last) {
    auto cp = utf8::next(it, last);
    if (cp > 0xffff) {  // make a surrogate pair
      *result++ = static_cast<char16_t>((cp >> 10) + internal::LEAD_OFFSET);
      *result++ =
          static_cast<char16_t>((cp & 0x3ff) + internal::TRAIL_SURROGATE_MIN);
    } else {
      *result++ = static_cast<char16_t>(cp);
    }
  }
  return result;
}

template <typename OctetIterator, typename U32BitIterator>
OctetIterator utf32to8(
    U32BitIterator first,
    U32BitIterator last,
    OctetIterator result) {
  auto it = first;
  while (it != last) {
    result = utf8::append(*(it++), result);
  }
  return result;
}

template <typename OctetIterator, typename U32BitIterator>
U32BitIterator utf8to32(
    OctetIterator first,
    OctetIterator last,
    U32BitIterator result) {
  auto it = first;
  while (it != last) {
    (*result++) = utf8::next(it, last);
  }
  return result;
}
}  // namespace utf8
}  // namespace skyr

#endif  // header guard
